<?php

/**
 * üîç X√ÅC MINH C·∫¨P NH·∫¨T LO·∫†I T√ÄI KHO·∫¢N
 * 
 * Script n√†y s·∫Ω x√°c minh r·∫±ng t·∫•t c·∫£ lo·∫°i t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng
 */

require __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use App\Models\ServicePackage;
use Illuminate\Support\Facades\DB;

echo "üîç X√ÅC MINH C·∫¨P NH·∫¨T LO·∫†I T√ÄI KHO·∫¢N üîç\n";
echo "====================================\n\n";

try {
    // Ki·ªÉm tra c√°c lo·∫°i t√†i kho·∫£n hi·ªán t·∫°i
    echo "üìä KI·ªÇM TRA C√ÅC LO·∫†I T√ÄI KHO·∫¢N HI·ªÜN T·∫†I...\n";
    echo "=========================================\n";

    $accountTypes = DB::table('service_packages')
        ->select('account_type', DB::raw('COUNT(*) as count'))
        ->groupBy('account_type')
        ->orderBy('count', 'desc')
        ->get();

    echo "üìã Danh s√°ch lo·∫°i t√†i kho·∫£n:\n";
    foreach ($accountTypes as $type) {
        echo "   ‚Ä¢ {$type->account_type}: {$type->count} g√≥i\n";
    }
    echo "\n";

    // Ki·ªÉm tra c√°c lo·∫°i t√†i kho·∫£n mong ƒë·ª£i
    echo "‚úÖ KI·ªÇM TRA C√ÅC LO·∫†I T√ÄI KHO·∫¢N MONG ƒê·ª¢I...\n";
    echo "==========================================\n";

    $expectedTypes = [
        'T√†i kho·∫£n ch√≠nh ch·ªß',
        'T√†i kho·∫£n c·∫•p (d√πng ri√™ng)',
        'T√†i kho·∫£n add family',
        'T√†i kho·∫£n d√πng chung'
    ];

    $foundTypes = $accountTypes->pluck('account_type')->toArray();
    $missingTypes = [];
    $extraTypes = [];

    // Ki·ªÉm tra lo·∫°i t√†i kho·∫£n mong ƒë·ª£i
    foreach ($expectedTypes as $expectedType) {
        if (in_array($expectedType, $foundTypes)) {
            $count = $accountTypes->where('account_type', $expectedType)->first()->count ?? 0;
            echo "   ‚úÖ {$expectedType}: {$count} g√≥i\n";
        } else {
            echo "   ‚ùå {$expectedType}: KH√îNG T√åM TH·∫§Y\n";
            $missingTypes[] = $expectedType;
        }
    }

    // Ki·ªÉm tra lo·∫°i t√†i kho·∫£n kh√¥ng mong ƒë·ª£i (c≈©)
    $oldTypes = ['Add mail', 'Team d√πng chung'];
    foreach ($oldTypes as $oldType) {
        if (in_array($oldType, $foundTypes)) {
            $count = $accountTypes->where('account_type', $oldType)->first()->count ?? 0;
            echo "   ‚ö†Ô∏è {$oldType}: {$count} g√≥i (LO·∫†I C≈® - C·∫¶N C·∫¨P NH·∫¨T)\n";
            $extraTypes[] = $oldType;
        }
    }
    echo "\n";

    // Ki·ªÉm tra t√†i kho·∫£n d√πng chung
    echo "üîç KI·ªÇM TRA T√ÄI KHO·∫¢N D√ôNG CHUNG...\n";
    echo "==================================\n";

    $sharedAccountsCount = DB::table('customer_services')
        ->join('service_packages', 'customer_services.service_package_id', '=', 'service_packages.id')
        ->where('service_packages.account_type', 'T√†i kho·∫£n d√πng chung')
        ->whereNotNull('customer_services.login_email')
        ->where('customer_services.login_email', '!=', '')
        ->count();

    $uniqueSharedEmails = DB::table('customer_services')
        ->join('service_packages', 'customer_services.service_package_id', '=', 'service_packages.id')
        ->where('service_packages.account_type', 'T√†i kho·∫£n d√πng chung')
        ->whereNotNull('customer_services.login_email')
        ->where('customer_services.login_email', '!=', '')
        ->distinct()
        ->count('customer_services.login_email');

    echo "üìä D·ªãch v·ª• t√†i kho·∫£n d√πng chung: {$sharedAccountsCount}\n";
    echo "üìß Email d√πng chung duy nh·∫•t: {$uniqueSharedEmails}\n\n";

    // T√≥m t·∫Øt k·∫øt qu·∫£
    echo "üìã T√ìM T·∫ÆT K·∫æT QU·∫¢:\n";
    echo "===================\n";

    if (empty($missingTypes) && empty($extraTypes)) {
        echo "üéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ LO·∫†I T√ÄI KHO·∫¢N ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T TH√ÄNH C√îNG!\n\n";

        echo "‚úÖ C√ÅC LO·∫†I T√ÄI KHO·∫¢N M·ªöI:\n";
        echo "==========================\n";
        echo "1. T√†i kho·∫£n ch√≠nh ch·ªß - T√†i kho·∫£n c√° nh√¢n, quy·ªÅn s·ªü h·ªØu ho√†n to√†n\n";
        echo "2. T√†i kho·∫£n c·∫•p (d√πng ri√™ng) - T√†i kho·∫£n ph·ª•, s·ª≠ d·ª•ng ri√™ng bi·ªát\n";
        echo "3. T√†i kho·∫£n add family - T√†i kho·∫£n th√™m v√†o g√≥i gia ƒë√¨nh\n";
        echo "4. T√†i kho·∫£n d√πng chung - T√†i kho·∫£n nhi·ªÅu ng∆∞·ªùi c√πng s·ª≠ d·ª•ng\n\n";

        echo "üîß CH·ª®C NƒÇNG HO·∫†T ƒê·ªòNG:\n";
        echo "=======================\n";
        echo "‚úÖ Dropdown t·∫°o g√≥i d·ªãch v·ª• c√≥ 4 lo·∫°i t√†i kho·∫£n m·ªõi\n";
        echo "‚úÖ Trang qu·∫£n l√Ω t√†i kho·∫£n d√πng chung ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng\n";
        echo "‚úÖ D·ªØ li·ªáu hi·ªán c√≥ ƒë∆∞·ª£c b·∫£o to√†n v√† c·∫≠p nh·∫≠t ch√≠nh x√°c\n";
        echo "‚úÖ Backup ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n\n\n";
    } else {
        echo "‚ö†Ô∏è C√íN V·∫§N ƒê·ªÄ C·∫¶N KH·∫ÆC PH·ª§C:\n";
        echo "=============================\n";

        if (!empty($missingTypes)) {
            echo "‚ùå Lo·∫°i t√†i kho·∫£n thi·∫øu:\n";
            foreach ($missingTypes as $type) {
                echo "   ‚Ä¢ {$type}\n";
            }
            echo "\n";
        }

        if (!empty($extraTypes)) {
            echo "‚ö†Ô∏è Lo·∫°i t√†i kho·∫£n c≈© c·∫ßn c·∫≠p nh·∫≠t:\n";
            foreach ($extraTypes as $type) {
                echo "   ‚Ä¢ {$type}\n";
            }
            echo "\n";
        }

        echo "üí° ƒê·ªÄ XU·∫§T:\n";
        echo "===========\n";
        echo "1. Ch·∫°y l·∫°i script update_account_types.php\n";
        echo "2. Ki·ªÉm tra l·∫°i database ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ch√≠nh x√°c\n";
        echo "3. X√≥a cache view: php artisan view:clear\n\n";
    }

    // Ki·ªÉm tra m·ªôt s·ªë g√≥i d·ªãch v·ª• c·ª• th·ªÉ
    echo "üîç KI·ªÇM TRA M·ªòT S·ªê G√ìI D·ªäCH V·ª§ C·ª§ TH·ªÇ...\n";
    echo "=========================================\n";

    $samplePackages = ServicePackage::take(5)->get();
    foreach ($samplePackages as $package) {
        echo "üì¶ {$package->name} (ID: {$package->id})\n";
        echo "   üè∑Ô∏è Lo·∫°i: {$package->account_type}\n";
        echo "   üí∞ Gi√°: " . number_format($package->price) . "ƒë\n\n";
    }

    // T·∫°o b√°o c√°o
    generateVerificationReport($accountTypes, $sharedAccountsCount, $uniqueSharedEmails, $missingTypes, $extraTypes);
} catch (\Exception $e) {
    echo "‚ùå L·ªñI: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}

function generateVerificationReport($accountTypes, $sharedAccountsCount, $uniqueSharedEmails, $missingTypes, $extraTypes)
{
    $timestamp = date('Y-m-d_H-i-s');
    $reportFile = "account_types_verification_report_{$timestamp}.txt";

    $report = "B√ÅO C√ÅO X√ÅC MINH C·∫¨P NH·∫¨T LO·∫†I T√ÄI KHO·∫¢N\n";
    $report .= "========================================\n\n";
    $report .= "Ng√†y x√°c minh: " . date('Y-m-d H:i:s') . "\n\n";

    $report .= "C√ÅC LO·∫†I T√ÄI KHO·∫¢N HI·ªÜN T·∫†I:\n";
    $report .= "============================\n";
    foreach ($accountTypes as $type) {
        $report .= "‚Ä¢ {$type->account_type}: {$type->count} g√≥i\n";
    }
    $report .= "\n";

    $report .= "TH·ªêNG K√ä T√ÄI KHO·∫¢N D√ôNG CHUNG:\n";
    $report .= "==============================\n";
    $report .= "‚Ä¢ T·ªïng d·ªãch v·ª•: {$sharedAccountsCount}\n";
    $report .= "‚Ä¢ Email duy nh·∫•t: {$uniqueSharedEmails}\n\n";

    if (empty($missingTypes) && empty($extraTypes)) {
        $report .= "K·∫æT QU·∫¢: TH√ÄNH C√îNG HO√ÄN TO√ÄN\n";
        $report .= "=============================\n";
        $report .= "‚úÖ T·∫•t c·∫£ lo·∫°i t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh x√°c\n";
        $report .= "‚úÖ Kh√¥ng c√≥ lo·∫°i t√†i kho·∫£n thi·∫øu ho·∫∑c c≈©\n";
        $report .= "‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng\n";
    } else {
        $report .= "K·∫æT QU·∫¢: C√íN V·∫§N ƒê·ªÄ\n";
        $report .= "====================\n";
        if (!empty($missingTypes)) {
            $report .= "‚ùå Lo·∫°i thi·∫øu: " . implode(', ', $missingTypes) . "\n";
        }
        if (!empty($extraTypes)) {
            $report .= "‚ö†Ô∏è Lo·∫°i c≈©: " . implode(', ', $extraTypes) . "\n";
        }
    }

    $report .= "\nC√ÅC LO·∫†I T√ÄI KHO·∫¢N M·ªöI:\n";
    $report .= "=======================\n";
    $report .= "1. T√†i kho·∫£n ch√≠nh ch·ªß\n";
    $report .= "2. T√†i kho·∫£n c·∫•p (d√πng ri√™ng)\n";
    $report .= "3. T√†i kho·∫£n add family\n";
    $report .= "4. T√†i kho·∫£n d√πng chung\n";

    file_put_contents($reportFile, $report);
    echo "üìÑ B√°o c√°o x√°c minh ƒë√£ l∆∞u: {$reportFile}\n";
}
