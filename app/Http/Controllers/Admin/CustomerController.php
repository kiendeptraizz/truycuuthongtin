<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Customer;
use App\Rules\ValidCustomerName;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class CustomerController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = Customer::with('customerServices.servicePackage.category');

        // Filter by date range
        if ($request->filled('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }

        // Filter by service package
        if ($request->filled('service_package_id')) {
            $query->whereHas('customerServices', function ($q) use ($request) {
                $q->where('service_package_id', $request->service_package_id);
            });
        }

        // Filter by service status
        if ($request->filled('service_status')) {
            $query->whereHas('customerServices', function ($q) use ($request) {
                $q->where('status', $request->service_status);
            });
        }

        // Tìm kiếm
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                    ->orWhere('email', 'like', "%{$search}%")
                    ->orWhere('phone', 'like', "%{$search}%")
                    ->orWhere('customer_code', 'like', "%{$search}%");
            });
        }

        $customers = $query->orderBy('created_at', 'desc')->paginate(20);

        // Get service packages for filter
        $servicePackages = \App\Models\ServicePackage::all();

        return view('admin.customers.index', compact('customers', 'servicePackages'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('admin.customers.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // Debug logging
        Log::info('Customer Store Request', [
            'request_data' => $request->all(),
            'user_id' => auth('admin')->id()
        ]);

        // Validation rules
        $rules = [
            'name' => ['required', 'string', 'max:255'],
            'email' => 'nullable|email|max:255|unique:customers,email',
            'phone' => 'nullable|string|max:20',
            'notes' => 'nullable|string|max:1000',
            'customer_code' => 'nullable|string|max:20|unique:customers,customer_code',
            'is_collaborator' => 'nullable|boolean',
        ];

        // Custom validation messages
        $messages = [
            'name.required' => 'Tên khách hàng là bắt buộc.',
            'name.max' => 'Tên khách hàng không được vượt quá 255 ký tự.',
            'email.email' => 'Email không đúng định dạng.',
            'email.unique' => 'Email này đã được sử dụng bởi khách hàng khác.',
            'phone.max' => 'Số điện thoại không được vượt quá 20 ký tự.',
            'notes.max' => 'Ghi chú không được vượt quá 1000 ký tự.',
            'customer_code.unique' => 'Mã khách hàng này đã tồn tại.',
            'customer_code.max' => 'Mã khách hàng không được vượt quá 20 ký tự.',
        ];

        $request->validate($rules, $messages);

        try {
            // Prepare data for creation
            $data = $request->only(['name', 'email', 'phone', 'notes']);

            // Handle collaborator flag
            $isCollaborator = $request->boolean('is_collaborator');
            $data['is_collaborator'] = $isCollaborator;

            // Handle customer code
            if ($request->filled('customer_code')) {
                // Validate format if provided
                $customerCode = strtoupper(trim($request->customer_code));

                // Check format based on collaborator status
                $expectedPrefix = $isCollaborator ? 'CTV' : 'KUN';
                $pattern = $isCollaborator ? '/^CTV\d{5}$/' : '/^KUN\d{5}$/';

                if (!preg_match($pattern, $customerCode)) {
                    return back()->withErrors([
                        'customer_code' => "Mã khách hàng phải theo định dạng {$expectedPrefix}##### (ví dụ: {$expectedPrefix}12345)"
                    ])->withInput();
                }

                $data['customer_code'] = $customerCode;
            }
            // If no customer_code provided, it will be auto-generated by the model

            $customer = Customer::create($data);

            // Kiểm tra action từ form
            $action = $request->input('action', 'save');

            if ($action === 'save_and_assign') {
                // Chuyển hướng đến trang gán dịch vụ
                return redirect()->route('admin.customers.assign-service', $customer)
                    ->with('success', "Khách hàng {$customer->name} (Mã: {$customer->customer_code}) đã được tạo thành công! Hãy gán dịch vụ cho khách hàng.");
            }

            return redirect(route('admin.customers.index') . '#customer-' . $customer->id)
                ->with('success', "Khách hàng {$customer->name} (Mã: {$customer->customer_code}) đã được tạo thành công!");
        } catch (\Exception $e) {
            Log::error('Error creating customer: ' . $e->getMessage());

            return back()->withErrors([
                'general' => 'Có lỗi xảy ra khi tạo khách hàng. Vui lòng thử lại.'
            ])->withInput();
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(Customer $customer)
    {
        $customer->load(['customerServices.servicePackage.category', 'customerServices.assignedBy']);

        return view('admin.customers.show', compact('customer'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Customer $customer)
    {
        return view('admin.customers.edit', compact('customer'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Customer $customer)
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => 'nullable|email|max:255',
            'phone' => 'nullable|string|max:20',
            'is_collaborator' => 'nullable|boolean',
        ]);

        $customer->update($request->only(['name', 'email', 'phone', 'is_collaborator']));

        return redirect(route('admin.customers.index') . '#customer-' . $customer->id)
            ->with('success', 'Thông tin khách hàng đã được cập nhật!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Customer $customer)
    {
        $customer->delete();

        return redirect()->route('admin.customers.index')
            ->with('success', 'Khách hàng đã được xóa!');
    }

    /**
     * Check if customer code exists (for AJAX validation)
     */
    public function checkCustomerCode($code)
    {
        $exists = Customer::where('customer_code', strtoupper($code))->exists();

        return response()->json([
            'exists' => $exists,
            'code' => strtoupper($code)
        ]);
    }
}
