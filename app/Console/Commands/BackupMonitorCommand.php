<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;
use ZipArchive;

class BackupMonitorCommand extends Command
{
    protected $signature = 'backup:monitor {--report : Generate detailed report} {--check : Check backup health}';
    protected $description = 'Gi√°m s√°t v√† b√°o c√°o t√¨nh tr·∫°ng backup';

    private $backupPath;

    public function handle()
    {
        $this->backupPath = storage_path('app/backups');

        $this->info('üîç GI√ÅM S√ÅT H·ªÜ TH·ªêNG BACKUP');
        $this->info('============================');

        if ($this->option('report')) {
            $this->generateDetailedReport();
        } elseif ($this->option('check')) {
            $this->checkBackupHealth();
        } else {
            $this->showQuickStatus();
        }
    }

    private function showQuickStatus()
    {
        $files = glob($this->backupPath . '/*.{zip,json}', GLOB_BRACE);

        if (empty($files)) {
            $this->error('‚ùå Kh√¥ng t√¨m th·∫•y backup n√†o!');
            return;
        }

        // S·∫Øp x·∫øp theo th·ªùi gian
        usort($files, function ($a, $b) {
            return filemtime($b) - filemtime($a);
        });

        $latestFile = $files[0];
        $latestTime = filemtime($latestFile);
        $hoursAgo = (time() - $latestTime) / 3600;

        $this->info("üìä T√åNH TR·∫†NG BACKUP:");
        $this->info("- T·ªïng s·ªë backup: " . count($files));
        $this->info("- Backup m·ªõi nh·∫•t: " . basename($latestFile));
        $this->info("- Th·ªùi gian: " . date('Y-m-d H:i:s', $latestTime) . " (" . round($hoursAgo, 1) . " gi·ªù tr∆∞·ªõc)");

        // C·∫£nh b√°o n·∫øu backup qu√° c≈©
        if ($hoursAgo > 25) { // H∆°n 25 gi·ªù
            $this->error("‚ö†Ô∏è C·∫¢NH B√ÅO: Backup qu√° c≈©! C·∫ßn ki·ªÉm tra h·ªá th·ªëng.");
        } else {
            $this->info("‚úÖ Backup trong th·ªùi gian cho ph√©p");
        }

        // Ki·ªÉm tra dung l∆∞·ª£ng
        $totalSize = 0;
        foreach ($files as $file) {
            $totalSize += filesize($file);
        }

        $this->info("- T·ªïng dung l∆∞·ª£ng: " . $this->formatBytes($totalSize));
    }

    private function generateDetailedReport()
    {
        $this->info('üìã B√ÅO C√ÅO CHI TI·∫æT H·ªÜ TH·ªêNG BACKUP');
        $this->info('=====================================');

        $files = glob($this->backupPath . '/*.{zip,json}', GLOB_BRACE);

        if (empty($files)) {
            $this->error('‚ùå Kh√¥ng t√¨m th·∫•y backup n√†o!');
            return;
        }

        // Ph√¢n lo·∫°i backup
        $dailyBackups = [];
        $weeklyBackups = [];
        $quickBackups = [];
        $otherBackups = [];

        foreach ($files as $file) {
            $fileName = basename($file);

            if (strpos($fileName, 'daily') !== false) {
                $dailyBackups[] = $file;
            } elseif (strpos($fileName, 'weekly') !== false) {
                $weeklyBackups[] = $file;
            } elseif (strpos($fileName, 'quick') !== false) {
                $quickBackups[] = $file;
            } else {
                $otherBackups[] = $file;
            }
        }

        // B√°o c√°o t·ª´ng lo·∫°i
        $this->reportBackupType('üìÖ BACKUP H√ÄNG NG√ÄY', $dailyBackups);
        $this->reportBackupType('üìÜ BACKUP H√ÄNG TU·∫¶N', $weeklyBackups);
        $this->reportBackupType('‚ö° BACKUP NHANH', $quickBackups);
        $this->reportBackupType('üìÅ BACKUP KH√ÅC', $otherBackups);

        // Th·ªëng k√™ t·ªïng quan
        $this->info("\nüìä TH·ªêNG K√ä T·ªîNG QUAN:");
        $this->info("- Daily backups: " . count($dailyBackups));
        $this->info("- Weekly backups: " . count($weeklyBackups));
        $this->info("- Quick backups: " . count($quickBackups));
        $this->info("- Other backups: " . count($otherBackups));

        $totalSize = array_sum(array_map('filesize', $files));
        $this->info("- T·ªïng dung l∆∞·ª£ng: " . $this->formatBytes($totalSize));

        // Ki·ªÉm tra xu h∆∞·ªõng
        $this->analyzeBackupTrends($files);
    }

    private function reportBackupType($title, $files)
    {
        $this->info("\n{$title}:");

        if (empty($files)) {
            $this->warn("  Kh√¥ng c√≥ backup n√†o");
            return;
        }

        // S·∫Øp x·∫øp theo th·ªùi gian
        usort($files, function ($a, $b) {
            return filemtime($b) - filemtime($a);
        });

        $count = 0;
        foreach ($files as $file) {
            if ($count >= 5) break; // Ch·ªâ hi·ªÉn th·ªã 5 backup m·ªõi nh·∫•t

            $fileName = basename($file);
            $size = $this->formatBytes(filesize($file));
            $time = date('Y-m-d H:i:s', filemtime($file));

            $this->info("  ‚Ä¢ {$fileName} ({$size}) - {$time}");
            $count++;
        }

        if (count($files) > 5) {
            $remaining = count($files) - 5;
            $this->info("  ... v√† {$remaining} backup kh√°c");
        }
    }

    private function checkBackupHealth()
    {
        $this->info('üè• KI·ªÇM TRA S·ª®C KH·ªéE BACKUP');
        $this->info('============================');

        $files = glob($this->backupPath . '/*.{zip,json}', GLOB_BRACE);
        $healthScore = 100;
        $issues = [];

        if (empty($files)) {
            $this->error('‚ùå NGHI√äM TR·ªåNG: Kh√¥ng c√≥ backup n√†o!');
            return;
        }

        // Ki·ªÉm tra backup g·∫ßn ƒë√¢y
        usort($files, function ($a, $b) {
            return filemtime($b) - filemtime($a);
        });

        $latestFile = $files[0];
        $hoursAgo = (time() - filemtime($latestFile)) / 3600;

        if ($hoursAgo > 25) {
            $healthScore -= 30;
            $issues[] = "Backup m·ªõi nh·∫•t qu√° c≈© (" . round($hoursAgo, 1) . " gi·ªù)";
        }

        // Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa 3 backup m·ªõi nh·∫•t
        $corruptedCount = 0;
        for ($i = 0; $i < min(3, count($files)); $i++) {
            if (!$this->verifyBackupIntegrity($files[$i])) {
                $corruptedCount++;
            }
        }

        if ($corruptedCount > 0) {
            $healthScore -= ($corruptedCount * 20);
            $issues[] = "{$corruptedCount} backup b·ªã l·ªói trong 3 backup m·ªõi nh·∫•t";
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng backup
        if (count($files) < 5) {
            $healthScore -= 10;
            $issues[] = "S·ªë l∆∞·ª£ng backup √≠t (" . count($files) . " < 5)";
        }

        // B√°o c√°o k·∫øt qu·∫£
        $this->info("\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA:");
        $this->info("ƒêi·ªÉm s·ª©c kh·ªèe: {$healthScore}/100");

        if ($healthScore >= 90) {
            $this->info("‚úÖ H·ªá th·ªëng backup ho·∫°t ƒë·ªông t·ªët");
        } elseif ($healthScore >= 70) {
            $this->warn("‚ö†Ô∏è H·ªá th·ªëng backup c·∫ßn ch√∫ √Ω");
        } else {
            $this->error("‚ùå H·ªá th·ªëng backup c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng");
        }

        if (!empty($issues)) {
            $this->info("\nüîç C√ÅC V·∫§N ƒê·ªÄ PH√ÅT HI·ªÜN:");
            foreach ($issues as $issue) {
                $this->warn("  ‚Ä¢ {$issue}");
            }
        }
    }

    private function analyzeBackupTrends($files)
    {
        $this->info("\nüìà PH√ÇN T√çCH XU H∆Ø·ªöNG:");

        // Ph√¢n t√≠ch theo ng√†y
        $dailyStats = [];
        foreach ($files as $file) {
            $date = date('Y-m-d', filemtime($file));
            if (!isset($dailyStats[$date])) {
                $dailyStats[$date] = ['count' => 0, 'size' => 0];
            }
            $dailyStats[$date]['count']++;
            $dailyStats[$date]['size'] += filesize($file);
        }

        // L·∫•y 7 ng√†y g·∫ßn nh·∫•t
        krsort($dailyStats);
        $recentDays = array_slice($dailyStats, 0, 7, true);

        foreach ($recentDays as $date => $stats) {
            $size = $this->formatBytes($stats['size']);
            $this->info("  ‚Ä¢ {$date}: {$stats['count']} backup, {$size}");
        }

        // T√≠nh trung b√¨nh
        $avgCount = array_sum(array_column($recentDays, 'count')) / count($recentDays);
        $avgSize = array_sum(array_column($recentDays, 'size')) / count($recentDays);

        $this->info("  Trung b√¨nh: " . round($avgCount, 1) . " backup/ng√†y, " . $this->formatBytes($avgSize) . "/ng√†y");
    }

    private function verifyBackupIntegrity($filePath)
    {
        $extension = pathinfo($filePath, PATHINFO_EXTENSION);

        if ($extension === 'zip') {
            return $this->verifyZipIntegrity($filePath);
        } elseif ($extension === 'json') {
            return $this->verifyJsonIntegrity($filePath);
        }

        return false;
    }

    private function verifyZipIntegrity($zipPath)
    {
        if (!class_exists('ZipArchive')) {
            return true; // Kh√¥ng th·ªÉ ki·ªÉm tra, coi nh∆∞ OK
        }

        $zip = new ZipArchive();
        $result = $zip->open($zipPath, ZipArchive::CHECKCONS);

        if ($result === TRUE) {
            $zip->close();
            return true;
        }

        return false;
    }

    private function verifyJsonIntegrity($jsonPath)
    {
        if (!file_exists($jsonPath)) {
            return false;
        }

        $data = json_decode(file_get_contents($jsonPath), true);

        if (!$data) {
            return false;
        }

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        return isset($data['backup_info']) &&
            (isset($data['customers']) || isset($data['customer_services']));
    }

    private function formatBytes($size, $precision = 2)
    {
        $units = ['B', 'KB', 'MB', 'GB'];

        for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
            $size /= 1024;
        }

        return round($size, $precision) . ' ' . $units[$i];
    }
}
